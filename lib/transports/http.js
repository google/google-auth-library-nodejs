/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

var url = require('./http/url');
var headers = require('./http/headers');
var payload = require('./http/payload');
var utils = require('./http/utils/http.js');

/**
 * Produces a request instance from either the http or https modules
 * determined by the generatedOptions argument given at invocation. Will attach
 * lifecycle event listeners to the request instance and facilitate downstream
 * processing of responses and errors.
 * @function formulateRequest
 * @param {Object} generatedOptions - the options generated by the wrappers'
 *  options reducers
 * @param {Function} cb - the callback to invoke once the request has completed
 *  in either failure or success
 * @returns {http.ClientRequest} - returns the request instance
 */
function formulateRequest (generatedOptions, cb) {
  var body = '';
  var request = utils.getTransport(generatedOptions.isUsingHttps).request(
    generatedOptions.requestOptions, function (response) {
      response.on('data', function (chunk) {
        body += chunk;
      });
      response.on('end', function () {
        cb(null, response, body);
      });
    }
  );
  request.on('error', function (err) {
    cb(err, null, null);
  });
  if (generatedOptions.hasBody) {
    request.write(generatedOptions.requestPayload.payload);
  }
  request.end();
  return request;
}

/**
 * Invokes the http/s wrappers' reducers in the correct order so that a set of
 * options which are compatible with node-core http/s libraries can be generated
 * from the user-provided request-style options given at invocation. After
 * generating options this function will then catalyze execution of the actual
 * request by invoking formulateRequest.
 * @function request
 * @param {Object} givenOptions - any user-provided request-style options given
 *  as an Object
 * @param {Function} [cb] - an optional function to be invoked once the request
 *  has been completed in either failure or success
 * @returns {http.ClientRequest} - return the request instance
 */
function request (givenOptions, cb) {
  return formulateRequest(
    url(
      headers(
        payload({}, givenOptions),
        givenOptions
      ),
      givenOptions
    ),
    utils.wrapGivenCallback(cb)
  );
}

module.exports = {
  request: request
};
